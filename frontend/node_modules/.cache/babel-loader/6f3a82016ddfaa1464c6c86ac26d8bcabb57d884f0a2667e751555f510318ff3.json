{"ast":null,"code":"var _jsxFileName = \"/Users/onnivitikainen/Desktop/online-todolist-v2/frontend/src/utils/providers/ActiveRouteContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActiveRouteContext = /*#__PURE__*/createContext();\nexport const ActiveRouteProvider = ({\n  children\n}) => {\n  _s();\n  const [activeRoute, setActiveRoute] = useState(\"/\");\n  return /*#__PURE__*/_jsxDEV(ActiveRouteContext.Provider, {\n    value: {\n      activeRoute,\n      setActiveRoute\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n_s(ActiveRouteProvider, \"1BwO2Wr/1uzwipiSCVQXz7ij+pE=\");\n_c = ActiveRouteProvider;\nexport const useActiveRoute = () => {\n  _s2();\n  const context = useContext(ActiveRouteContext);\n  if (!context) {\n    throw new Error(\"useActiveRoute must be used within an ActiveRouteProvider\");\n  }\n  return context;\n};\n_s2(useActiveRoute, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ActiveRouteProvider\");","map":{"version":3,"names":["createContext","useContext","useState","jsxDEV","_jsxDEV","ActiveRouteContext","ActiveRouteProvider","children","_s","activeRoute","setActiveRoute","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useActiveRoute","_s2","context","Error","$RefreshReg$"],"sources":["/Users/onnivitikainen/Desktop/online-todolist-v2/frontend/src/utils/providers/ActiveRouteContext.js"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\n\nconst ActiveRouteContext = createContext();\n\nexport const ActiveRouteProvider = ({ children }) => {\n  const [activeRoute, setActiveRoute] = useState(\"/\");\n\n  return (\n    <ActiveRouteContext.Provider value={{ activeRoute, setActiveRoute }}>\n      {children}\n    </ActiveRouteContext.Provider>\n  );\n};\n\nexport const useActiveRoute = () => {\n  const context = useContext(ActiveRouteContext);\n  if (!context) {\n    throw new Error(\"useActiveRoute must be used within an ActiveRouteProvider\");\n  }\n  return context;\n};"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,kBAAkB,gBAAGL,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMM,mBAAmB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,GAAG,CAAC;EAEnD,oBACEE,OAAA,CAACC,kBAAkB,CAACM,QAAQ;IAACC,KAAK,EAAE;MAAEH,WAAW;MAAEC;IAAe,CAAE;IAAAH,QAAA,EACjEA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACkB,CAAC;AAElC,CAAC;AAACR,EAAA,CARWF,mBAAmB;AAAAW,EAAA,GAAnBX,mBAAmB;AAUhC,OAAO,MAAMY,cAAc,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAClC,MAAMC,OAAO,GAAGnB,UAAU,CAACI,kBAAkB,CAAC;EAC9C,IAAI,CAACe,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,2DAA2D,CAAC;EAC9E;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,cAAc;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}