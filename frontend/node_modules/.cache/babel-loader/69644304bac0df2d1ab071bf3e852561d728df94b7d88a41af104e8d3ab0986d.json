{"ast":null,"code":"import axios from 'axios';\nimport CustomError from '../../utils/errors';\nconst studentLogin = async (baseURL, classroom_name, username) => {\n  try {\n    const response = await fetch(`${baseURL}/studentlogin`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        classroom_name,\n        username\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      if (Array.isArray(data.message) && data.message.length > 0) {\n        errorMessage = data.message[0].msg;\n      } else {\n        errorMessage = data.message;\n      }\n      throw new CustomError(`${data.message}`, response.status);\n    }\n    window.localStorage.setItem(\"token\", data.token);\n    window.localStorage.setItem(\"username\", data.username);\n    window.localStorage.setItem(\"classroom_name\", data.classroom_name);\n    window.localStorage.setItem(\"admin\", data.admin);\n    return;\n  } catch (error) {\n    throw new CustomError(`${error.message}`);\n  }\n};\nconst getStudentTodos = async (baseURL, token, class_id, username) => {\n  if (class_id) {\n    try {\n      const response = await axios.get(`${baseURL}/getstudenttodos`, {\n        params: {\n          username,\n          class_id\n        },\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const data = response.data;\n      if (!response.status === 200) {\n        throw new CustomError(`${data.message}`, response.status);\n      }\n      return data;\n    } catch (error) {\n      throw new CustomError(`${error.message}`, error.status);\n    }\n  } else {\n    console.error(\"No class id\");\n  }\n};\nconst updateTodoComplete = async (baseURL, token, student_todo_id, completed) => {\n  try {\n    const updates = {\n      completed: completed\n    };\n    return await updateTodo(baseURL, token, student_todo_id, updates);\n  } catch (err) {\n    console.error('Error updating todo completion status:', err);\n    throw new CustomError(`Updating todo completion status failed: ${err.message}`);\n  }\n};\nconst updateTodo = async (baseURL, token, student_todo_id, updates) => {\n  try {\n    const response = await axios.put(`${baseURL}/updatestudenttodo`, {\n      student_todo_id: student_todo_id,\n      updates: updates\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n    return;\n  } catch (err) {\n    console.error('Error updating todos:', err);\n    throw new CustomError(`Updating todos failed: ${err.message}`);\n  }\n};\nconst getStudents = async (baseURL, token, classroom_name) => {\n  try {\n    const response = await axios.get(`${baseURL}/getclassroomstudents`, {\n      params: {\n        classroom_name\n      },\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = response.data;\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n    return data;\n  } catch (err) {\n    console.error('Error getting students:', err);\n    throw new CustomError(`Getting students failed: ${err.message}`);\n  }\n};\nconst deleteStudent = async (baseURL, token, username) => {\n  try {\n    const response = await axios.delete(`${baseURL}/deletestudent`, {\n      params: {\n        username: username\n      },\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = response.data;\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n    return;\n  } catch (err) {\n    console.error('Error deleting student:', err);\n    throw new CustomError(`Deleting student failed: ${err.message}`);\n  }\n};\nconst getStudent = async (baseURL, token, username) => {\n  try {\n    const response = await axios.get(`${baseURL}/getstudent`, {\n      params: {\n        username\n      },\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = response.data;\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n    return data;\n  } catch (err) {\n    console.error('Error getting students:', err);\n    throw new CustomError(`Getting students failed: ${err.message}`);\n  }\n};\nconst setName = async (baseURL, token, username, name) => {\n  try {\n    const response = await axios.put(`${baseURL}/setstudentname`, {\n      username,\n      name\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = response.data;\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n    return;\n  } catch (err) {\n    console.error('Error setting name:', err);\n    throw new CustomError(`Setting name failed: ${err.message}`);\n  }\n};\nexport { studentLogin, getStudentTodos, updateTodoComplete, getStudents, deleteStudent, getStudent, setName };","map":{"version":3,"names":["axios","CustomError","studentLogin","baseURL","classroom_name","username","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Array","isArray","message","length","errorMessage","msg","status","window","localStorage","setItem","token","admin","error","getStudentTodos","class_id","get","params","console","updateTodoComplete","student_todo_id","completed","updates","updateTodo","err","put","getStudents","deleteStudent","delete","getStudent","setName","name"],"sources":["/Users/onnivitikainen/Desktop/online-todolist-v2/frontend/src/services/student/student.js"],"sourcesContent":["import axios from 'axios';\nimport CustomError from '../../utils/errors';\n\nconst studentLogin = async  (baseURL, classroom_name, username) => {\n  try {\n      const response = await fetch(`${baseURL}/studentlogin`, {\n      method: 'POST',\n      headers: {\n          'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ classroom_name, username }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        if (Array.isArray(data.message) && data.message.length > 0) {\n          errorMessage = data.message[0].msg;\n        } else {\n          errorMessage = data.message;\n        }\n          throw new CustomError(`${data.message}`, response.status);\n      }\n\n      window.localStorage.setItem(\"token\", data.token);\n      window.localStorage.setItem(\"username\", data.username);\n      window.localStorage.setItem(\"classroom_name\", data.classroom_name);\n      window.localStorage.setItem(\"admin\", data.admin);\n\n      return;\n      \n  } \n  catch (error) {\n      throw new CustomError(`${error.message}`);\n  }\n}\n\n\nconst getStudentTodos = async (baseURL, token, class_id, username) => {\n  if (class_id) {\n    try {\n      const response = await axios.get(`${baseURL}/getstudenttodos`, {\n        params: {\n          username,\n          class_id,\n        },\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      const data = response.data;\n\n      if (!response.status === 200) {\n        throw new CustomError(`${data.message}`, response.status);\n      }\n\n      return data;\n\n    } catch (error) {\n      throw new CustomError(`${error.message}`, error.status);\n    }\n  } else {\n    console.error(\"No class id\");\n  }\n};\n\nconst updateTodoComplete = async (baseURL, token, student_todo_id, completed) => {\n  try {\n    const updates = { completed: completed };\n    return await updateTodo(baseURL, token, student_todo_id, updates);\n  } catch (err) {\n    console.error('Error updating todo completion status:', err);\n    throw new CustomError(`Updating todo completion status failed: ${err.message}`);\n  }\n};\n\nconst updateTodo = async (baseURL, token, student_todo_id, updates) => {\n  try {\n    const response = await axios.put(`${baseURL}/updatestudenttodo`, {\n      student_todo_id: student_todo_id,\n      updates: updates,\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n\n    return;\n\n  } catch (err) {\n    console.error('Error updating todos:', err);\n    throw new CustomError(`Updating todos failed: ${err.message}`);\n  }\n};\n\nconst getStudents = async (baseURL, token, classroom_name) => {\n  try {\n    const response = await axios.get(`${baseURL}/getclassroomstudents`, {\n      params: {\n        classroom_name,\n      },\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const data = response.data;\n\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n\n    return data;\n\n  } catch (err) {\n    console.error('Error getting students:', err);\n    throw new CustomError(`Getting students failed: ${err.message}`);\n  }\n};\n\nconst deleteStudent = async (baseURL, token, username) => {\n  try {\n    const response = await axios.delete(`${baseURL}/deletestudent`, {\n      params: {\n        username: username,\n      },\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n    });\n\n    const data = response.data;\n\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n\n    return;\n\n  } catch (err) {\n    console.error('Error deleting student:', err);\n    throw new CustomError(`Deleting student failed: ${err.message}`);\n  }\n};\n\nconst getStudent = async (baseURL, token, username) => {\n  try {\n    const response = await axios.get(`${baseURL}/getstudent`, {\n      params: {\n        username,\n      },\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n    });\n\n    const data = response.data;\n\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n\n    return data;\n\n  } catch (err) {\n    console.error('Error getting students:', err);\n    throw new CustomError(`Getting students failed: ${err.message}`);\n  }\n};\n\nconst setName = async (baseURL, token, username, name) => {\n  try {\n    const response = await axios.put(`${baseURL}/setstudentname`, {\n      username,\n      name,\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const data = response.data;\n\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n\n    return;\n\n  } catch (err) {\n    console.error('Error setting name:', err);\n    throw new CustomError(`Setting name failed: ${err.message}`);\n  }\n};\n\nexport {\n    studentLogin,\n    getStudentTodos,\n    updateTodoComplete,\n    getStudents,\n    deleteStudent,\n    getStudent,\n    setName\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}