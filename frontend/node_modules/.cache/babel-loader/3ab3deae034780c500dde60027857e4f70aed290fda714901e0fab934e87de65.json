{"ast":null,"code":"import axios from 'axios';\nimport { CustomError } from \"../../utils/errors\";\nconst getClasses = async (baseURL, token, classroom_name) => {\n  try {\n    const response = await axios.get(`${baseURL}/findclasses`, {\n      params: {\n        classroom_name: classroom_name\n      },\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n    const data = response.data;\n    return data.classes;\n  } catch (error) {\n    console.error('Error fetching classes:', error);\n    throw new CustomError(`Getting classes failed: ${error.message}`);\n  }\n};\nconst deleteClass = async (baseURL, token, class_id) => {\n  try {\n    const response = await axios.delete(`${baseURL}/deleteclass`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      data: {\n        class_id: class_id\n      }\n    });\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n    return;\n  } catch (error) {\n    console.error('Error deleting class:', error);\n    throw new CustomError(`Deleting class failed: ${error.message}`);\n  }\n};\nconst createClass = async (baseURL, token, classroom_name, name) => {\n  try {\n    const response = await axios.post(`${baseURL}/addclass`, {\n      classroom_name: classroom_name,\n      name: name\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n    return;\n  } catch (error) {\n    console.error('Error creating class:', error);\n    throw new CustomError(`Creating class failed: ${error.message}`);\n  }\n};\nconst setSharedClass = async (baseURL, token, classroom_name, class_id) => {\n  try {\n    const response = await axios.put(`${baseURL}/setsharedclass`, {\n      classroom_name: classroom_name,\n      class_id: class_id\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n    return;\n  } catch (error) {\n    console.error('Error setting shared class:', error);\n    throw new CustomError(`Setting shared class failed: ${error.message}`);\n  }\n};\nconst getSharedClass = async (baseURL, token, classroom_name) => {\n  try {\n    const response = await axios.get(`${baseURL}/getsharedclass`, {\n      params: {\n        classroom_name: classroom_name\n      },\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n    const data = response.data;\n    return data.shared_id;\n  } catch (error) {\n    console.error('Error fetching shared class:', error);\n    throw new CustomError(`Fetching shared class failed: ${error.message}`);\n  }\n};\nconst getClass = async (baseURL, token, class_id) => {\n  try {\n    const response = await axios.get(`${baseURL}/findclass`, {\n      params: {\n        class_id: class_id\n      },\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = response.data;\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n    return data.class;\n  } catch (error) {\n    console.error('Error fetching class:', error);\n    throw new CustomError(`Fetching class failed: ${error.message}`);\n  }\n};\nexport { getClasses, deleteClass, createClass, getSharedClass, setSharedClass, getClass };","map":{"version":3,"names":["axios","CustomError","getClasses","baseURL","token","classroom_name","response","get","params","headers","status","data","classes","error","console","message","deleteClass","class_id","delete","createClass","name","post","setSharedClass","put","getSharedClass","shared_id","getClass","class"],"sources":["/Users/onnivitikainen/Desktop/online-todolist-v2/frontend/src/services/admin/class.js"],"sourcesContent":["import axios from 'axios';\nimport { CustomError } from \"../../utils/errors\";\n\n\nconst getClasses = async (baseURL, token, classroom_name) => {\n    try {\n      const response = await axios.get(`${baseURL}/findclasses`, {\n        params: {\n          classroom_name: classroom_name,\n        },\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n  \n      if (!response.status === 200) {\n        throw new CustomError(`HTTP error! Status: ${response.status}`);\n      }\n  \n      const data = response.data;\n      return data.classes;\n    } catch (error) {\n      console.error('Error fetching classes:', error);\n      throw new CustomError(`Getting classes failed: ${error.message}`);\n    }\n  };\n  \n  const deleteClass = async (baseURL, token, class_id) => {\n    try {\n      const response = await axios.delete(`${baseURL}/deleteclass`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n        data: {\n          class_id: class_id,\n        },\n      });\n  \n      if (!response.status === 200) {\n        throw new CustomError(`HTTP error! Status: ${response.status}`);\n      }\n  \n      return;\n    } catch (error) {\n      console.error('Error deleting class:', error);\n      throw new CustomError(`Deleting class failed: ${error.message}`);\n    }\n  };\n  \n  const createClass = async (baseURL, token, classroom_name, name) => {\n    try {\n      const response = await axios.post(`${baseURL}/addclass`, {\n        classroom_name: classroom_name,\n        name: name,\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n  \n      if (!response.status === 200) {\n        throw new CustomError(`HTTP error! Status: ${response.status}`);\n      }\n  \n      return;\n    } catch (error) {\n      console.error('Error creating class:', error);\n      throw new CustomError(`Creating class failed: ${error.message}`);\n    }\n  };\n  \n  const setSharedClass = async (baseURL, token, classroom_name, class_id) => {\n    try {\n      const response = await axios.put(`${baseURL}/setsharedclass`, {\n        classroom_name: classroom_name,\n        class_id: class_id,\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n  \n      if (!response.status === 200) {\n        throw new CustomError(`HTTP error! Status: ${response.status}`);\n      }\n  \n      return;\n    } catch (error) {\n      console.error('Error setting shared class:', error);\n      throw new CustomError(`Setting shared class failed: ${error.message}`);\n    }\n  };\n  \n  const getSharedClass = async (baseURL, token, classroom_name) => {\n    try {\n      const response = await axios.get(`${baseURL}/getsharedclass`, {\n        params: {\n          classroom_name: classroom_name,\n        },\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n  \n      if (!response.status === 200) {\n        throw new CustomError(`HTTP error! Status: ${response.status}`);\n      }\n  \n      const data = response.data;\n      return data.shared_id;\n    } catch (error) {\n      console.error('Error fetching shared class:', error);\n      throw new CustomError(`Fetching shared class failed: ${error.message}`);\n    }\n  };\n  \n  const getClass = async (baseURL, token, class_id) => {\n    try {\n      const response = await axios.get(`${baseURL}/findclass`, {\n        params: {\n          class_id: class_id,\n        },\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n  \n      const data = response.data;\n  \n      if (!response.status === 200) {\n        throw new CustomError(`${data.message}`, response.status);\n      }\n  \n      return data.class;\n    } catch (error) {\n      console.error('Error fetching class:', error);\n      throw new CustomError(`Fetching class failed: ${error.message}`);\n    }\n  };\n\n\nexport {getClasses, deleteClass, createClass, getSharedClass, setSharedClass, getClass};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}