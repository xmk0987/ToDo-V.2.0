{"ast":null,"code":"import axios from 'axios';\nimport { CustomError } from '../../utils/errors';\nconst login = async (loginName, password, BASE_URL) => {\n  try {\n    const response = await fetch(`${BASE_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        loginName,\n        password\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      let errorMessage = 'Request failed';\n      if (data.message) {\n        if (Array.isArray(data.message) && data.message.length > 0) {\n          errorMessage = data.message[0].msg;\n        } else {\n          errorMessage = data.message;\n        }\n      }\n      throw new CustomError(errorMessage, response.status);\n    }\n    localStorage.setItem(\"token\", data.token);\n    localStorage.setItem(\"userId\", data.userId);\n    localStorage.setItem(\"username\", data.username);\n    localStorage.setItem(\"admin\", data.admin);\n    return;\n  } catch (error) {\n    throw new CustomError(`Login failed: ${error.message}`);\n  }\n};\nconst signup = async (username, email, password, BASE_URL) => {\n  try {\n    const response = await fetch(`${BASE_URL}/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        email,\n        password\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      let errorMessage = 'Request failed';\n      if (data.message) {\n        if (Array.isArray(data.message) && data.message.length > 0) {\n          errorMessage = data.message[0].msg;\n        } else {\n          errorMessage = data.message;\n        }\n      }\n      throw new CustomError(errorMessage, response.status);\n    }\n    return data.message;\n  } catch (error) {\n    throw new CustomError(`${error.message}`);\n  }\n};\nconst deleteUser = async (baseURL, token, username) => {\n  try {\n    const response = await axios.delete(`${baseURL}/deleteuser?username=${username}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (response.status !== 204) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n    return;\n  } catch (err) {\n    throw new CustomError(` ${err.message}`);\n  }\n};\nexport { deleteUser, signup, login };","map":{"version":3,"names":["axios","CustomError","login","loginName","password","BASE_URL","response","fetch","method","headers","body","JSON","stringify","data","json","ok","errorMessage","message","Array","isArray","length","msg","status","localStorage","setItem","token","userId","username","admin","error","signup","email","deleteUser","baseURL","delete","err"],"sources":["/Users/onnivitikainen/Desktop/online-todolist-v2/frontend/src/services/user/admin.js"],"sourcesContent":["import axios from 'axios';\nimport { CustomError } from '../../utils/errors';\n\n\nconst login = async (loginName, password, BASE_URL) => {\n  try {\n    const response = await fetch(`${BASE_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ loginName, password }),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n        let errorMessage = 'Request failed';\n  \n        if (data.message) {\n          if (Array.isArray(data.message) && data.message.length > 0) {\n            errorMessage = data.message[0].msg;\n          } else {\n            errorMessage = data.message;\n          }\n        }\n        throw new CustomError(errorMessage, response.status);\n    }\n\n    localStorage.setItem(\"token\", data.token);\n    localStorage.setItem(\"userId\", data.userId);\n    localStorage.setItem(\"username\", data.username);\n    localStorage.setItem(\"admin\", data.admin);\n\n    return;\n  } \n  catch (error) {\n    throw new CustomError(`Login failed: ${error.message}`);\n  }\n};\n\nconst signup = async (username, email, password, BASE_URL) => {\n    try {\n      const response = await fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, email, password }),\n      });\n  \n      const data = await response.json();\n\n      if (!response.ok) {\n        let errorMessage = 'Request failed';\n  \n        if (data.message) {\n          if (Array.isArray(data.message) && data.message.length > 0) {\n            errorMessage = data.message[0].msg;\n          } else {\n            errorMessage = data.message;\n          }\n        }\n        throw new CustomError(errorMessage, response.status);\n      }\n\n      return data.message;\n\n    } catch (error) {\n          throw new CustomError(`${error.message}`);\n    }\n  };\n\nconst deleteUser = async (baseURL, token, username) => {\n  try {\n    const response = await axios.delete(`${baseURL}/deleteuser?username=${username}`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n    });\n\n    if (response.status !== 204) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n\n    return;\n\n  } catch (err) {\n    throw new CustomError(` ${err.message}`);\n  }\n};\n\nexport { deleteUser, signup, login };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}