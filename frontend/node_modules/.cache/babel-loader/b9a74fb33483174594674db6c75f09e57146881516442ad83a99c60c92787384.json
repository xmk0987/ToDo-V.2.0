{"ast":null,"code":"import axios from 'axios';\nimport CustomError from '../../utils/errors';\nconst studentLogin = async (baseURL, classroom_name, username) => {\n  try {\n    const response = await axios.post(`${baseURL}/studentlogin`, {\n      classroom_name,\n      username\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = response.data;\n    console.log(\"Täällä\");\n    console.log(data);\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n    window.localStorage.setItem(\"token\", data.token);\n    window.localStorage.setItem(\"username\", data.username);\n    window.localStorage.setItem(\"classroom_name\", data.classroom_name);\n    window.localStorage.setItem(\"admin\", data.admin);\n    return;\n  } catch (error) {\n    console.log(\"Täällä\");\n    console.log(error);\n    console.log(error.response.data.message);\n    throw new CustomError(`${error.message}`);\n  }\n};\nconst getStudentTodos = async (baseURL, token, class_id, username) => {\n  if (class_id) {\n    try {\n      const response = await axios.get(`${baseURL}/getstudenttodos`, {\n        params: {\n          username,\n          class_id\n        },\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const data = response.data;\n      if (!response.status === 200) {\n        throw new CustomError(`${data.message}`, response.status);\n      }\n      return data;\n    } catch (error) {\n      throw new CustomError(`${error.message}`, error.status);\n    }\n  } else {\n    console.error(\"No class id\");\n  }\n};\nconst updateTodoComplete = async (baseURL, token, student_todo_id, completed) => {\n  try {\n    const updates = {\n      completed: completed\n    };\n    return await updateTodo(baseURL, token, student_todo_id, updates);\n  } catch (err) {\n    console.error('Error updating todo completion status:', err);\n    throw new CustomError(`Updating todo completion status failed: ${err.message}`);\n  }\n};\nconst updateTodo = async (baseURL, token, student_todo_id, updates) => {\n  try {\n    const response = await axios.put(`${baseURL}/updatestudenttodo`, {\n      student_todo_id: student_todo_id,\n      updates: updates\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n    return;\n  } catch (err) {\n    console.error('Error updating todos:', err);\n    throw new CustomError(`Updating todos failed: ${err.message}`);\n  }\n};\nconst getStudents = async (baseURL, token, classroom_name) => {\n  try {\n    const response = await axios.get(`${baseURL}/getclassroomstudents`, {\n      params: {\n        classroom_name\n      },\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = response.data;\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n    return data;\n  } catch (err) {\n    console.error('Error getting students:', err);\n    throw new CustomError(`Getting students failed: ${err.message}`);\n  }\n};\nconst deleteStudent = async (baseURL, token, username) => {\n  try {\n    const response = await axios.delete(`${baseURL}/deletestudent`, {\n      params: {\n        username: username\n      },\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = response.data;\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n    return;\n  } catch (err) {\n    console.error('Error deleting student:', err);\n    throw new CustomError(`Deleting student failed: ${err.message}`);\n  }\n};\nconst getStudent = async (baseURL, token, username) => {\n  try {\n    const response = await axios.get(`${baseURL}/getstudent`, {\n      params: {\n        username\n      },\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = response.data;\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n    return data;\n  } catch (err) {\n    console.error('Error getting students:', err);\n    throw new CustomError(`Getting students failed: ${err.message}`);\n  }\n};\nconst setName = async (baseURL, token, username, name) => {\n  try {\n    const response = await axios.put(`${baseURL}/setstudentname`, {\n      username,\n      name\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = response.data;\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n    return;\n  } catch (err) {\n    console.error('Error setting name:', err);\n    throw new CustomError(`Setting name failed: ${err.message}`);\n  }\n};\nexport { studentLogin, getStudentTodos, updateTodoComplete, getStudents, deleteStudent, getStudent, setName };","map":{"version":3,"names":["axios","CustomError","studentLogin","baseURL","classroom_name","username","response","post","headers","data","console","log","status","message","window","localStorage","setItem","token","admin","error","getStudentTodos","class_id","get","params","updateTodoComplete","student_todo_id","completed","updates","updateTodo","err","put","getStudents","deleteStudent","delete","getStudent","setName","name"],"sources":["/Users/onnivitikainen/Desktop/online-todolist-v2/frontend/src/services/student/student.js"],"sourcesContent":["import axios from 'axios';\nimport CustomError from '../../utils/errors';\n\nconst studentLogin = async (baseURL, classroom_name, username) => {\n  try {\n    const response = await axios.post(`${baseURL}/studentlogin`, {\n      classroom_name,\n      username,\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const data = response.data;\n\n    console.log(\"Täällä\");\n    console.log(data);\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n\n    window.localStorage.setItem(\"token\", data.token);\n    window.localStorage.setItem(\"username\", data.username);\n    window.localStorage.setItem(\"classroom_name\", data.classroom_name);\n    window.localStorage.setItem(\"admin\", data.admin);\n\n    return;\n\n  } catch (error) {\n    console.log(\"Täällä\");\n    console.log(error);\n    console.log(error.response.data.message);\n    throw new CustomError(`${error.message}`);\n  }\n};\n\nconst getStudentTodos = async (baseURL, token, class_id, username) => {\n  if (class_id) {\n    try {\n      const response = await axios.get(`${baseURL}/getstudenttodos`, {\n        params: {\n          username,\n          class_id,\n        },\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      const data = response.data;\n\n      if (!response.status === 200) {\n        throw new CustomError(`${data.message}`, response.status);\n      }\n\n      return data;\n\n    } catch (error) {\n      throw new CustomError(`${error.message}`, error.status);\n    }\n  } else {\n    console.error(\"No class id\");\n  }\n};\n\nconst updateTodoComplete = async (baseURL, token, student_todo_id, completed) => {\n  try {\n    const updates = { completed: completed };\n    return await updateTodo(baseURL, token, student_todo_id, updates);\n  } catch (err) {\n    console.error('Error updating todo completion status:', err);\n    throw new CustomError(`Updating todo completion status failed: ${err.message}`);\n  }\n};\n\nconst updateTodo = async (baseURL, token, student_todo_id, updates) => {\n  try {\n    const response = await axios.put(`${baseURL}/updatestudenttodo`, {\n      student_todo_id: student_todo_id,\n      updates: updates,\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n\n    return;\n\n  } catch (err) {\n    console.error('Error updating todos:', err);\n    throw new CustomError(`Updating todos failed: ${err.message}`);\n  }\n};\n\nconst getStudents = async (baseURL, token, classroom_name) => {\n  try {\n    const response = await axios.get(`${baseURL}/getclassroomstudents`, {\n      params: {\n        classroom_name,\n      },\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const data = response.data;\n\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n\n    return data;\n\n  } catch (err) {\n    console.error('Error getting students:', err);\n    throw new CustomError(`Getting students failed: ${err.message}`);\n  }\n};\n\nconst deleteStudent = async (baseURL, token, username) => {\n  try {\n    const response = await axios.delete(`${baseURL}/deletestudent`, {\n      params: {\n        username: username,\n      },\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n    });\n\n    const data = response.data;\n\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n\n    return;\n\n  } catch (err) {\n    console.error('Error deleting student:', err);\n    throw new CustomError(`Deleting student failed: ${err.message}`);\n  }\n};\n\nconst getStudent = async (baseURL, token, username) => {\n  try {\n    const response = await axios.get(`${baseURL}/getstudent`, {\n      params: {\n        username,\n      },\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n    });\n\n    const data = response.data;\n\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n\n    return data;\n\n  } catch (err) {\n    console.error('Error getting students:', err);\n    throw new CustomError(`Getting students failed: ${err.message}`);\n  }\n};\n\nconst setName = async (baseURL, token, username, name) => {\n  try {\n    const response = await axios.put(`${baseURL}/setstudentname`, {\n      username,\n      name,\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const data = response.data;\n\n    if (!response.status === 200) {\n      throw new CustomError(`${data.message}`, response.status);\n    }\n\n    return;\n\n  } catch (err) {\n    console.error('Error setting name:', err);\n    throw new CustomError(`Setting name failed: ${err.message}`);\n  }\n};\n\nexport {\n    studentLogin,\n    getStudentTodos,\n    updateTodoComplete,\n    getStudents,\n    deleteStudent,\n    getStudent,\n    setName\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}