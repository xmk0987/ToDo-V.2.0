{"ast":null,"code":"import axios from 'axios';\nimport CustomError from '../utils/errors';\nconst getStudentAnswer = async (baseURL, todo_id, username) => {\n  try {\n    const response = await axios.get(`${baseURL}/getstudentanswer`, {\n      params: {\n        todo_id,\n        username\n      }\n    });\n    const data = response.data;\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n    return data;\n  } catch (err) {\n    console.error('Error fetching student answers:', err);\n    throw new CustomError(`Getting student answers failed: ${err.message}`);\n  }\n};\nconst addStudentAnswer = async (baseURL, token, todo_id, answer, username) => {\n  try {\n    const response = await axios.post(`${baseURL}/addstudentanswer`, {\n      todo_id,\n      answer,\n      username\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n    return;\n  } catch (err) {\n    console.error('Error adding student answers:', err);\n    throw new CustomError(`Adding student answers failed: ${err.message}`);\n  }\n};\nconst updateStudentAnswer = async (baseURL, token, todo_id, answer, username) => {\n  try {\n    const response = await axios.put(`${baseURL}/updatestudentanswer`, {\n      todo_id,\n      answer,\n      username\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n    return;\n  } catch (err) {\n    console.error('Error updating student answers:', err);\n    throw new CustomError(`Updating student answers failed: ${err.message}`);\n  }\n};\nconst deleteStudentAnswer = async (baseURL, token, todo_id, username) => {\n  try {\n    const response = await axios.delete(`${baseURL}/deletestudentanswer`, {\n      params: {\n        todo_id,\n        username\n      },\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n    return;\n  } catch (err) {\n    console.error('Error deleting student answers:', err);\n    throw new CustomError(`Deleting student answers failed: ${err.message}`);\n  }\n};\nconst handleStudentAnswer = async (baseURL, token, todo_id, username, answer = null) => {\n  if (answer === '') {\n    return await deleteStudentAnswer(baseURL, token, todo_id, username);\n  }\n  const oldAnswer = await getStudentAnswer(baseURL, todo_id, username);\n  if (oldAnswer.length === 0 && answer.trim().length > 0) {\n    return await addStudentAnswer(baseURL, token, todo_id, answer, username);\n  } else if (oldAnswer.length !== 0 && answer.trim().length > 0) {\n    return await updateStudentAnswer(baseURL, token, todo_id, answer, username);\n  } else {\n    return;\n  }\n};\nexport { getStudentAnswer, handleStudentAnswer };","map":{"version":3,"names":["axios","CustomError","getStudentAnswer","baseURL","todo_id","username","response","get","params","data","status","err","console","error","message","addStudentAnswer","token","answer","post","headers","updateStudentAnswer","put","deleteStudentAnswer","delete","handleStudentAnswer","oldAnswer","length","trim"],"sources":["/Users/onnivitikainen/Desktop/online-todolist-v2/frontend/src/services/student/studentanswers.js"],"sourcesContent":["import axios from 'axios';\nimport CustomError from '../utils/errors';\n\nconst getStudentAnswer = async (baseURL, todo_id, username) => {\n  try {\n    const response = await axios.get(`${baseURL}/getstudentanswer`, {\n      params: {\n        todo_id,\n        username,\n      },\n    });\n\n    const data = response.data;\n\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n\n    return data;\n\n  } catch (err) {\n    console.error('Error fetching student answers:', err);\n    throw new CustomError(`Getting student answers failed: ${err.message}`);\n  }\n};\n\nconst addStudentAnswer = async (baseURL, token, todo_id, answer, username) => {\n  try {\n    const response = await axios.post(`${baseURL}/addstudentanswer`, {\n      todo_id,\n      answer,\n      username,\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n\n    return;\n\n  } catch (err) {\n    console.error('Error adding student answers:', err);\n    throw new CustomError(`Adding student answers failed: ${err.message}`);\n  }\n};\n\nconst updateStudentAnswer = async (baseURL, token, todo_id, answer, username) => {\n  try {\n    const response = await axios.put(`${baseURL}/updatestudentanswer`, {\n      todo_id,\n      answer,\n      username,\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n\n    return;\n\n  } catch (err) {\n    console.error('Error updating student answers:', err);\n    throw new CustomError(`Updating student answers failed: ${err.message}`);\n  }\n};\n\nconst deleteStudentAnswer = async (baseURL, token, todo_id, username) => {\n  try {\n    const response = await axios.delete(`${baseURL}/deletestudentanswer`, {\n      params: {\n        todo_id,\n        username,\n      },\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n    });\n\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n\n    return;\n\n  } catch (err) {\n    console.error('Error deleting student answers:', err);\n    throw new CustomError(`Deleting student answers failed: ${err.message}`);\n  }\n};\n\nconst handleStudentAnswer = async (baseURL, token, todo_id, username, answer = null) => {\n  if (answer === '') {\n    return await deleteStudentAnswer(baseURL, token, todo_id, username);\n  }\n  const oldAnswer = await getStudentAnswer(baseURL, todo_id, username);\n  if (oldAnswer.length === 0 && answer.trim().length > 0) {\n    return await addStudentAnswer(baseURL, token, todo_id, answer, username);\n  } else if (oldAnswer.length !== 0 && answer.trim().length > 0) {\n    return await updateStudentAnswer(baseURL, token, todo_id, answer, username);\n  } else {\n    return;\n  }\n};\n\nexport { getStudentAnswer, handleStudentAnswer };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}