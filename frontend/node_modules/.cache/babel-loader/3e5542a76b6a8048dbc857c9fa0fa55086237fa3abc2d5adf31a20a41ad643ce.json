{"ast":null,"code":"import axios from 'axios';\nimport { CustomError } from '../../utils/errors';\nconst getAnswer = async (baseURL, todo_id) => {\n  try {\n    const response = await axios.get(`${baseURL}/getanswer`, {\n      params: {\n        todo_id: todo_id\n      }\n    });\n    const data = response.data;\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n    return data;\n  } catch (error) {\n    console.error('Error fetching answers:', error);\n    throw new CustomError(`Getting answers failed: ${error.message}`);\n  }\n};\nconst addAnswer = async (baseURL, token, todo_id, answer) => {\n  try {\n    const response = await axios.post(`${baseURL}/addanswer`, {\n      todo_id: todo_id,\n      answer: answer\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n    return;\n  } catch (error) {\n    console.error('Error adding answers:', error);\n    throw new CustomError(`Adding answers failed: ${error.message}`);\n  }\n};\nconst updateAnswer = async (baseURL, token, todo_id, answer) => {\n  try {\n    const response = await axios.put(`${baseURL}/updateanswer`, {\n      todo_id: todo_id,\n      answer: answer\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n    return;\n  } catch (error) {\n    console.error('Error updating answers:', error);\n    throw new CustomError(`Updating answers failed: ${error.message}`);\n  }\n};\nconst deleteAnswer = async (baseURL, token, todo_id) => {\n  console.log(\"pitäisi poistaa\");\n  try {\n    const response = await axios.delete(`${baseURL}/deleteanswer`, {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      params: {\n        todo_id: todo_id\n      }\n    });\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n    return;\n  } catch (error) {\n    console.error('Error deleting answers:', error);\n    throw new CustomError(`Deleting answers failed: ${error.message}`);\n  }\n};\nconst handleAnswer = async (baseURL, token, todo_id, answer) => {\n  const oldAnswer = await getAnswer(baseURL, todo_id);\n  if (oldAnswer.length === 0 && answer.trim().length > 0) {\n    return await addAnswer(baseURL, token, todo_id, answer);\n  } else if (oldAnswer.length !== 0 && answer.trim().length > 0) {\n    return await updateAnswer(baseURL, token, todo_id, answer);\n  } else if (oldAnswer.length === 0 && answer.trim().length === 0) {\n    return;\n  } else {\n    return await deleteAnswer(baseURL, token, todo_id);\n  }\n};\nexport { getAnswer, handleAnswer };","map":{"version":3,"names":["axios","CustomError","getAnswer","baseURL","todo_id","response","get","params","data","status","error","console","message","addAnswer","token","answer","post","headers","updateAnswer","put","deleteAnswer","log","delete","handleAnswer","oldAnswer","length","trim"],"sources":["/Users/onnivitikainen/Desktop/online-todolist-v2/frontend/src/services/admin/answers.js"],"sourcesContent":["import axios from 'axios';\nimport { CustomError } from '../../utils/errors';\n\nconst getAnswer = async (baseURL, todo_id) => {\n  try {\n    const response = await axios.get(`${baseURL}/getanswer`, {\n      params: {\n        todo_id: todo_id,\n      },\n    });\n\n    const data = response.data;\n\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n\n    return data;\n\n  } catch (error) {\n    console.error('Error fetching answers:', error);\n    throw new CustomError(`Getting answers failed: ${error.message}`);\n  }\n};\n\nconst addAnswer = async (baseURL, token, todo_id, answer) => {\n  try {\n    const response = await axios.post(`${baseURL}/addanswer`, {\n      todo_id: todo_id,\n      answer: answer,\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n\n    return;\n\n  } catch (error) {\n    console.error('Error adding answers:', error);\n    throw new CustomError(`Adding answers failed: ${error.message}`);\n  }\n};\n\nconst updateAnswer = async (baseURL, token, todo_id, answer) => {\n  try {\n    const response = await axios.put(`${baseURL}/updateanswer`, {\n      todo_id: todo_id,\n      answer: answer,\n    }, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n\n    return;\n\n  } catch (error) {\n    console.error('Error updating answers:', error);\n    throw new CustomError(`Updating answers failed: ${error.message}`);\n  }\n};\n\nconst deleteAnswer = async (baseURL, token, todo_id) => {\n  console.log(\"pitäisi poistaa\");\n  try {\n    const response = await axios.delete(`${baseURL}/deleteanswer`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n      params: {\n        todo_id: todo_id,\n      },\n    });\n\n    if (!response.status === 200) {\n      throw new CustomError(`HTTP error! Status: ${response.status}`);\n    }\n\n    return;\n\n  } catch (error) {\n    console.error('Error deleting answers:', error);\n    throw new CustomError(`Deleting answers failed: ${error.message}`);\n  }\n};\n\nconst handleAnswer = async (baseURL, token, todo_id, answer) => {\n  const oldAnswer = await getAnswer(baseURL, todo_id);\n  if (oldAnswer.length === 0 && answer.trim().length > 0) {\n    return await addAnswer(baseURL, token, todo_id, answer);\n  } else if (oldAnswer.length !== 0 && answer.trim().length > 0) {\n    return await updateAnswer(baseURL, token, todo_id, answer);\n  } else if (oldAnswer.length === 0 && answer.trim().length === 0) {\n    return;\n  } else {\n    return await deleteAnswer(baseURL, token, todo_id);\n  }\n};\n\nexport { getAnswer, handleAnswer };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}